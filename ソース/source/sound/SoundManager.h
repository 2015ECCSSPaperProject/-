#ifndef SOUNDMANAGER_H_
#define SOUNDMANAGER_H_

//********************************************************************************************************************
//
//		クラスの宣言
//
//********************************************************************************************************************
//		サウンドマネージャー(staticで関数呼び出し)
//****************************************************************************************************************

class iexSoundIIDX;


//=======================================================================================
//	サウンド実体管理
namespace SoundManager
{
	void Initialize();
	void Release();
	void Update();
}



//=======================================================================================
//	サウンド基底クラス
class SoundBase
{
protected:
	iexSoundIIDX *play_manager;	// iexSound
	int data_no;					// wavデータの種類(番号)


public:

	enum { NOT_FOUND = -1 };

	//===============================================
	//	データ検索
	//===============================================
	virtual int Find_data_no(char *_ID) = 0;
};



//=======================================================================================
//	SE管理クラス
class SE : public SoundBase
{
private:
	int max_count;				// セットしたデータ数

	int Play_in(int no, float volume, bool loop);

public:

	//===============================================
	//	音データ
	//===============================================
	struct	DATA{
		char *id;					// 呼び出す際に使用する識別コード
		char *file_name;			// ファイルパス
		int same_play_max;			// 同一の音を複数再生する最大値
		float volume;				// ボリューム

		int start_num;				// 1つのwavデータあたり start_num 〜 start_num + same_play_max 分のデータを保持
	};


	//===============================================
	//	初期化と解放
	//===============================================
	void Initialize();
	void Release();

	//===============================================
	//	更		新
	//===============================================
	void Update();


	//===============================================
	//	処		理
	//===============================================
	int Play(char *_ID, bool loop = false);			// 簡易版
	int Play(char *_ID, float volume, bool loop);	// ボリューム設定版
	void Stop(int no);								// Playで返ってきた数値を入れる
	void Stop_all();									// 全部止める


	//===============================================
	//	データ検索
	//===============================================
	int Find_data_no(char *_ID);
};


//=======================================================================================
//	BGM管理クラス
class BGM : public SoundBase
{
private:

	int Play_in(int no, float volume, bool loop);

public:
	enum F_TYPE{ FADE_NONE = 0, FADE_IN, FADE_OUT };
	void None(int no);
	void In(int no);
	void Out(int no);
	void(BGM::*Fade_mode_funk[3])(int);

	//===============================================
	//	音データ
	//===============================================
	struct	DATA{
		char *id;					// 呼び出す際に使用する識別コード
		char *file_name;			// ファイルパス
		float volume;				// ボリューム
		bool loop;					// ループ

		float fade_speed;			// フェードスピード
		F_TYPE fade_type;			// 関数が分岐する
	};


	//===============================================
	//	初期化と解放
	//===============================================
	void Initialize();
	void Release();

	//===============================================
	//	更		新
	//===============================================
	void Update();


	//===============================================
	//	処		理
	//===============================================
	int Play(char *_ID, bool loop = true);				// 簡易版
	int Play(char *_ID, float volume, bool loop);		// フル設定版

	int Fade_in(char *_ID, int speed, bool = true);		// フェードイン

	void Stop(char *_ID);								// Playで返ってきた数値を入れる
	void Fade_out(char *_ID, int speed);				// フェードアウト
	void Stop_all();									// 全部止める


	//===============================================
	//	データ検索
	//===============================================
	int Find_data_no(char *_ID);
};


//===============================================
//	実体
//===============================================
extern SE *se;
extern BGM *bgm;


#endif